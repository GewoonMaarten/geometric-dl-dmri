:py:mod:`transform`
===================

.. py:module:: transform


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   transform.Signal2SH
   transform.SH2Signal




.. py:class:: Signal2SH(sh_order, gradients, lb_lambda=0.006)

   Bases: :py:obj:`torch.nn.Module`

   Signal2SH(dwi) -> dwi_sh

   Computes the corresponding spherical harmonic coefficients

   Args:
       x_in (5D tensor): input dwi tensor
       x_in.size(): (Batchsize x Number of shells * Number of gradients x DimX x DimY x DimZ)
       y (5D tensor): corresponding harmonic coefficients tensor
       y.size(): (Batchsize x Number of shells*Number of coefficients x DimX x DimY x DimZ)

   .. py:method:: forward(self, x_in)



.. py:class:: SH2Signal(sh_order, gradients)

   Bases: :py:obj:`torch.nn.Module`

   SH2Signal(dwi_sh) -> dwi

   Computes the corresponding dwi signal for each gradient

   Args:
       x_in (5D tensor): input spherical harmonic tensor
       x_in.size(): (Batchsize x Number of shells*Number of coefficients x DimX x DimY x DimZ)
       y (5D tensor): corresponding dwi tensor
       y.size(): (Batchsize x Number of shells * Number of gradients x DimX x DimY x DimZ)

   .. py:method:: forward(self, x_in)



