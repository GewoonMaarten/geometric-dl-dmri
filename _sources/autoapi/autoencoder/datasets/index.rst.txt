:py:mod:`autoencoder.datasets`
==============================

.. py:module:: autoencoder.datasets


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   autoencoder.datasets.DiffusionMRIDataset
   autoencoder.datasets.MRIDataModule




.. py:class:: DiffusionMRIDataset(parameters_file_path, data_file_path, subject_list, tissue, include_parameters = None, exclude_parameters = None, batch_size = 1, return_target = False, use_spherical_data = False)

   Bases: :py:obj:`torch.utils.data.Dataset`

   Diffusion MRI dataset. Loads voxel data from HDF5 file fast.

   :param parameters_file_path: HDF5 file path that contains all parameters from the MRI data
   :param data_file_path: HDF5 file path containing voxel data
   :param subject_list: list of subjects to create the dataset with.
   :param tissue: The tissue to return. Can be the following values: ``wb``, ``gm``, ``wm``, and ``csf``.
                  where:
                      - ``wb`` = Whole Brain
                      - ``gm`` = Grey Matter
                      - ``wm`` = White Matter
                      - ``csf`` = Cerebral Spinal Fluid
                  These tissue types should be created beforehand with MRTrix3 ``5ttgen`` tool.
   :param include_parameters: parameters to *only* include in the dataset. Defaults to None.
   :param exclude_parameters: parameters to exclude from the dataset. Defaults to None.
   :param batch_size: batch size. Defaults to 0.
   :param return_target: return target data with all parameters included. Useful for loss calculation when recreating
                         the dataset from a subset of parameters. Defaults to False.
   :param use_spherical_data: Used to transform the data for models that require spherical data. Defaults to False.

   .. py:method:: get_subject_id_by_batch_id(self, batch_id)


   .. py:method:: get_metadata_by_subject_id(self, subject_id)


   .. py:method:: __len__(self)


   .. py:method:: __getitem__(self, index)

      Generates one sample of data



.. py:class:: MRIDataModule(parameters_file_path, data_file_path, train_subject_ids, validate_subject_ids, include_parameters = None, exclude_parameters = None, return_target = False, use_spherical_data = False, batch_size = 0, num_workers = 0)

   Bases: :py:obj:`pytorch_lightning.LightningDataModule`

   .. py:method:: setup(self, stage)


   .. py:method:: train_dataloader(self)


   .. py:method:: val_dataloader(self)


   .. py:method:: test_dataloader(self)



